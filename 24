import React, { useState, useRef, useEffect } from 'react';
import { LotStatus, LOT_STATUSES } from '../types';
import { cn } from '../lib/utils';
import { ChevronDown } from 'lucide-react';

interface StatusBadgeProps {
  status: LotStatus;
  onChange: (newStatus: LotStatus) => void;
}

const statusStyles: Record<LotStatus, string> = {
  'Planejado': 'bg-blue-500/20 text-blue-300 border-blue-500/30 hover:bg-blue-500/30',
  'Em Produção': 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30 hover:bg-yellow-500/30',
  'Concluído': 'bg-green-500/20 text-green-300 border-green-500/30 hover:bg-green-500/30',
};

const StatusBadge: React.FC<StatusBadgeProps> = ({ status, onChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleSelect = (newStatus: LotStatus) => {
    onChange(newStatus);
    setIsOpen(false);
  };

  return (
    <div className="relative" ref={ref}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={cn('px-3 py-1 text-xs font-semibold rounded-full border flex items-center gap-1 transition-colors', statusStyles[status])}
      >
        {status}
        <ChevronDown size={14} className={`transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      {isOpen && (
        <div className="absolute top-full right-0 mt-2 w-40 bg-gray-700 border border-gray-600 rounded-md shadow-lg z-10">
          {LOT_STATUSES.map(s => (
            <button
              key={s}
              onClick={() => handleSelect(s)}
              className={cn(
                'w-full text-left px-3 py-2 text-sm hover:bg-gray-600',
                s === status ? 'text-white font-bold' : 'text-gray-300'
              )}
            >
              {s}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default StatusBadge;
