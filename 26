import React, { useEffect, useState } from 'react';
import Modal from './Modal';
import { Lot, Product, Employee, Nozzle } from '../types';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Plus, Trash2 } from 'lucide-react';
import { format } from 'date-fns';

const schema = z.object({
  name: z.string().min(3, "O nome deve ter pelo menos 3 caracteres."),
  startDate: z.string().refine((val) => !isNaN(Date.parse(val)), "Data inválida."),
  employeeId: z.string().optional(),
  nozzleId: z.string().min(1, "Selecione um bico para o lote."),
  products: z.array(z.object({
    id: z.string(),
    name: z.string(),
    production_time: z.number(),
    quantity: z.number().min(1, "A quantidade deve ser pelo menos 1."),
  })).min(1, "Adicione pelo menos um produto ao lote."),
});

type FormData = z.infer<typeof schema>;

interface LotFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (data: FormData, lotId: string | null) => void;
  onDelete: (lotId: string) => void;
  existingLot?: Lot | null;
  products: Product[];
  employees: Employee[];
  nozzles: Nozzle[];
}

const LotFormModal: React.FC<LotFormModalProps> = ({ isOpen, onClose, onSave, onDelete, existingLot, products = [], employees = [], nozzles = [] }) => {
  const { register, control, handleSubmit, reset, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      name: '',
      startDate: format(new Date(), 'yyyy-MM-dd'),
      products: [],
      employeeId: '',
      nozzleId: '',
    },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "products",
  });

  const [availableProducts, setAvailableProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<string>('');

  useEffect(() => {
    if (isOpen) {
      if (existingLot) {
        reset({
          name: existingLot.name,
          startDate: format(existingLot.startDate, 'yyyy-MM-dd'),
          products: existingLot.products.map(p => ({
            id: p.id,
            name: p.name,
            production_time: p.production_time,
            quantity: p.quantity
          })),
          employeeId: existingLot.employeeId || '',
          nozzleId: existingLot.nozzleId || '',
        });
      } else {
        reset({
          name: '',
          startDate: format(new Date(), 'yyyy-MM-dd'),
          products: [],
          employeeId: '',
          nozzleId: '',
        });
      }
    }
  }, [isOpen, existingLot, reset]);
  
  useEffect(() => {
    const usedProductIds = new Set(fields.map(f => f.id));
    setAvailableProducts(products.filter(p => !usedProductIds.has(p.id)));
    setSelectedProduct('');
  }, [fields, products]);


  const handleAddProduct = () => {
    const productToAdd = products.find(p => p.id === selectedProduct);
    if (productToAdd) {
      append({ ...productToAdd, quantity: 1 });
    }
  };

  const processSubmit = (data: FormData) => {
    onSave(data, existingLot?.id || null);
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={existingLot ? 'Editar Lote' : 'Criar Novo Lote'} size="xl">
      <form onSubmit={handleSubmit(processSubmit)} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-300">Nome do Lote</label>
              <input {...register('name')} id="name" className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2" />
              {errors.name && <p className="text-red-400 text-xs mt-1">{errors.name.message}</p>}
            </div>
            <div>
              <label htmlFor="startDate" className="block text-sm font-medium text-gray-300">Data de Início</label>
              <input {...register('startDate')} id="startDate" type="date" className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2" />
              {errors.startDate && <p className="text-red-400 text-xs mt-1">{errors.startDate.message}</p>}
            </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label htmlFor="nozzleId" className="block text-sm font-medium text-gray-300">Bico (Ferramenta)</label>
                <select {...register('nozzleId')} id="nozzleId" className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2">
                    <option value="">Selecione um bico</option>
                    {nozzles.map(n => <option key={n.id} value={n.id}>{n.name} ({n.flow_rate} g/s)</option>)}
                </select>
                {errors.nozzleId && <p className="text-red-400 text-xs mt-1">{errors.nozzleId.message}</p>}
            </div>
            <div>
                <label htmlFor="employeeId" className="block text-sm font-medium text-gray-300">Atribuir a</label>
                <select {...register('employeeId')} id="employeeId" className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2">
                    <option value="">Não atribuído</option>
                    {employees.map(e => <option key={e.id} value={e.id}>{e.name}</option>)}
                </select>
            </div>
        </div>

        <div>
          <h4 className="text-md font-medium text-gray-200 mb-2">Produtos</h4>
          <div className="space-y-2 max-h-48 overflow-y-auto pr-2">
            {fields.map((field, index) => (
              <div key={field.id} className="flex items-center gap-2 p-2 bg-gray-700/50 rounded-md">
                <span className="flex-grow text-gray-200">{field.name}</span>
                <Controller
                  name={`products.${index}.quantity`}
                  control={control}
                  render={({ field }) => (
                    <input
                      {...field}
                      type="number"
                      className="w-20 bg-gray-900 border-gray-600 rounded-md p-1 text-center text-white"
                      onChange={e => field.onChange(parseInt(e.target.value, 10) || 0)}
                    />
                  )}
                />
                <button type="button" onClick={() => remove(index)} className="p-1 text-red-400 hover:text-red-300"><Trash2 size={16} /></button>
              </div>
            ))}
             {errors.products && <p className="text-red-400 text-xs mt-1">{errors.products.message}</p>}
          </div>
          <div className="flex gap-2 mt-3">
            <select value={selectedProduct} onChange={e => setSelectedProduct(e.target.value)} className="flex-grow bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2">
              <option value="" disabled>Selecione um produto para adicionar</option>
              {availableProducts.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
            </select>
            <button type="button" onClick={handleAddProduct} disabled={!selectedProduct} className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 disabled:bg-gray-600 disabled:cursor-not-allowed">
              <Plus size={20} />
            </button>
          </div>
        </div>
        
        <div className="flex justify-between items-center pt-4 border-t border-gray-700">
            <div>
                {existingLot && (
                    <button type="button" onClick={() => onDelete(existingLot.id)} className="px-4 py-2 bg-red-800 text-white font-semibold rounded-lg hover:bg-red-700 transition-colors">
                        Excluir Lote
                    </button>
                )}
            </div>
            <div className="flex gap-2">
                <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-500 transition-colors">
                    Cancelar
                </button>
                <button type="submit" className="px-4 py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 transition-colors">
                    Salvar Lote
                </button>
            </div>
        </div>
      </form>
    </Modal>
  );
};

export default LotFormModal;
