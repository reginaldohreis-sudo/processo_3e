import React from 'react';
import { Lot, LotStatus, Employee } from '../types';
import { Eye, Edit, FileDown, User, Package, Clock } from 'lucide-react';
import { format } from 'date-fns';
import { cn, formatMinutes } from '../lib/utils';
import StatusBadge from './StatusBadge';

interface LotItemProps {
  lot: Lot;
  employees: Employee[];
  onView: (lot: Lot) => void;
  onEdit: (lot: Lot) => void;
  onUpdateStatus: (lotId: string, status: LotStatus) => void;
}

const LotItem: React.FC<LotItemProps> = ({ lot, employees, onView, onEdit, onUpdateStatus }) => {
  const assignedEmployee = employees.find(e => e.id === lot.employeeId);

  const getProgress = () => {
    if (lot.status === 'Concluído') return 100;
    if (lot.status === 'Planejado') return 0;
    if (lot.totalItems === 0) return 0;
    
    return (lot.totalCompletedItems / lot.totalItems) * 100;
  };

  const progress = getProgress();

  return (
    <div className="bg-gray-800 rounded-xl border border-gray-700 shadow-lg flex flex-col transition-all hover:border-gray-600 hover:shadow-blue-500/10">
      <div className="p-5">
        <div className="flex justify-between items-start">
          <h3 className="font-bold text-lg text-white truncate pr-4" title={lot.name}>{lot.name}</h3>
          <StatusBadge 
            status={lot.status} 
            onChange={(newStatus) => onUpdateStatus(lot.id, newStatus)} 
          />
        </div>
        <div className="mt-2 flex items-center gap-2 text-xs text-gray-400">
            <User size={14} />
            <span>{assignedEmployee?.name || 'Não atribuído'}</span>
        </div>
        <div className="mt-4 space-y-3 text-sm text-gray-400">
          <div className="flex justify-between">
            <span>Início:</span>
            <span className="font-medium text-gray-300">{format(lot.startDate, 'dd/MM/yyyy')}</span>
          </div>
          <div className="flex justify-between">
            <span>Entrega (Prev.):</span>
            <span className="font-medium text-gray-300">{format(lot.estimatedDeliveryDate, 'dd/MM/yyyy')}</span>
          </div>
        </div>
      </div>
      
      <div className="px-5 mt-auto">
        <div className="w-full bg-gray-700 rounded-full h-2.5">
          <div className="bg-blue-500 h-2.5 rounded-full" style={{ width: `${progress}%` }}></div>
        </div>
        <div className="flex justify-between text-xs text-gray-400 mt-2">
            <span>{lot.totalCompletedItems} / {lot.totalItems} itens</span>
            <span>{Math.round(progress)}%</span>
        </div>
      </div>

      <div className="border-t border-gray-700 mt-5 p-4 grid grid-cols-3 gap-2 text-center text-sm">
        <div>
            <div className="font-bold text-white">{lot.totalItems}</div>
            <div className="text-xs text-gray-400">Itens Totais</div>
        </div>
        <div>
            <div className="font-bold text-white">{formatMinutes(lot.totalTimeSpent)}</div>
            <div className="text-xs text-gray-400">Tempo Gasto</div>
        </div>
        <div>
            <div className="font-bold text-white">{lot.totalInputUsed.toLocaleString('pt-BR', { maximumFractionDigits: 2 })} kg</div>
            <div className="text-xs text-gray-400">Insumo Gasto</div>
        </div>
      </div>

      <div className="border-t border-gray-700 p-3 flex justify-end items-center gap-2">
        <button onClick={() => onView(lot)} className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-md transition-colors" title="Visualizar e Atualizar Progresso"><Eye size={18} /></button>
        <button onClick={() => onEdit(lot)} className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-md transition-colors" title="Editar Lote"><Edit size={18} /></button>
        <button onClick={() => onView(lot)} className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-md transition-colors" title="Exportar (Visualizar Relatório)"><FileDown size={18} /></button>
      </div>
    </div>
  );
};

export default LotItem;
